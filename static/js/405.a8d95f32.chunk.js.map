{"version":3,"file":"static/js/405.a8d95f32.chunk.js","mappings":"sSAAMA,EAAM,mCACL,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGACcC,MAAM,4DAAD,OACsCF,IAFzD,cACCG,EADD,gBAIiBA,EAAKC,OAJtB,cAICC,EAJD,yBAKEA,EAAQC,SALV,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,yFACkBN,MAAM,2DAAD,OAC0BF,EAD1B,kBACuCQ,IAF9D,cACCC,EADD,gBAGgBA,EAASL,OAHzB,cAGCM,EAHD,yBAIEA,GAJF,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAyBC,GAAzB,yFACkBV,MAAM,4CAAD,OACWU,EADX,oBACyBZ,IAFhD,cACCS,EADD,gBAGgBA,EAASL,OAHzB,cAGCM,EAHD,yBAIEA,GAJF,kEAMA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAyBD,GAAzB,yFACkBV,MAAM,sCAAD,OACYU,EADZ,4BACkCZ,IAFzD,cACCS,EADD,gBAIgBA,EAASL,OAJzB,cAICM,EAJD,yBAKEA,GALF,kEAOA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4BF,GAA5B,yFACkBV,MAAM,sCAAD,OACYU,EADZ,4BACkCZ,IAFzD,cACCS,EADD,gBAIgBA,EAASL,OAJzB,cAICM,EAJD,yBAKEA,GALF,oE,yEC3BQ,SAASK,EAAT,GAAoC,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MACvC,GAAKD,EAAL,CAIA,IAAME,EAAWF,EAAKG,KAAI,SAAAC,GACxB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAIR,IAAMK,MAAO,CAAEK,KAAML,GAA9C,SACGG,EAAIG,SAFAH,EAAIR,OAOjB,OAAO,wBAAKM,O,0HCdC,SAASM,EAAT,GAAsC,IAApBC,EAAmB,EAAnBA,gBAC/B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOT,EAAP,KAAcU,EAAd,KAWA,OACE,kBAAMC,SANW,SAAAC,GACjBA,EAAEC,iBACF,IAAMC,EAAcd,EAAMe,OAAOC,MAAM,KAAKC,KAAK,KACjDT,EAAgB,CAAEU,MAAOJ,KAGzB,WACE,kBAAOK,SAXS,SAAAP,GAClBF,EAASE,EAAEQ,cAAcC,QAUOC,KAAK,OAAOC,WAAS,KACnD,mBAAQD,KAAK,SAAb,uBCXS,SAASE,IACtB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBlB,EAArB,KACA,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOV,EAAP,KAAa4B,EAAb,KACA,GAA0BlB,EAAAA,EAAAA,UAAS,IAAnC,eAAOS,EAAP,KAAcU,EAAd,KACMvB,EAAI,wBAAoBa,GAY9B,OAXAW,EAAAA,EAAAA,YAAU,WACR,IAAMX,EAAQQ,EAAaI,IAAI,SAC1BZ,IAGLU,EAASV,IACT5B,EAAAA,EAAAA,IAAY4B,GAAOa,MAAK,SAAAvC,GACtBmC,EAAQnC,EAASH,eAElB,CAACqC,KAGF,4BACE,SAACnB,EAAD,CAAQC,gBAAiBA,KACzB,SAACV,EAAA,EAAD,CAAUE,MAAOK,EAAMN,KAAMA","sources":["components/Fetch's/Fetch's.js","components/FilmList/FilmList.js","components/Search/Search.js","pages/Movies.js"],"sourcesContent":["const KEY = 'c842d6df69ab537d9e67db332ce4bf5c';\nexport async function FetchTopList() {\n  const list = await fetch(\n    `https://api.themoviedb.org/3/trending/movie/week?api_key=${KEY}`\n  );\n  const request = await list.json();\n  return request.results;\n}\n\nexport async function FetchByName(name) {\n  const response = await fetch(`\n    https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${name}`);\n  const parsed = await response.json();\n  return parsed;\n}\nexport async function FetchById(id) {\n  const response = await fetch(`\n    https://api.themoviedb.org/3/movie/${id}?api_key=${KEY}`);\n  const parsed = await response.json();\n  return parsed;\n}\nexport async function FetchCast(id) {\n  const response = await fetch(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${KEY}`\n  );\n  const parsed = await response.json();\n  return parsed;\n}\nexport async function FetchReviews(id) {\n  const response = await fetch(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${KEY}`\n  );\n  const parsed = await response.json();\n  return parsed;\n}\n","import { Link } from 'react-router-dom';\nexport default function FilmList({ data, state }) {\n  if (!data) {\n    return;\n  }\n\n  const elements = data.map(ell => {\n    return (\n      <li key={ell.id}>\n        <Link to={`/movies/${ell.id}`} state={{ from: state }}>\n          {ell.title}\n        </Link>\n      </li>\n    );\n  });\n  return <ul>{elements}</ul>;\n}\n","import { useState } from 'react';\nexport default function Search({ setSearchParams }) {\n  const [state, setState] = useState('');\n\n  const changeInput = e => {\n    setState(e.currentTarget.value);\n  };\n\n  const submitForm = e => {\n    e.preventDefault();\n    const queryString = state.trim().split(' ').join('+');\n    setSearchParams({ query: queryString });\n  };\n  return (\n    <form onSubmit={submitForm}>\n      <input onChange={changeInput} type=\"text\" autoFocus />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n}\n","import { useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { FetchByName } from \"../components/Fetch's/Fetch's\";\nimport FilmList from '../components/FilmList/FilmList';\nimport Search from 'components/Search/Search';\nexport default function Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [data, setData] = useState('');\n  const [query, setQuery] = useState('');\n  const from = `/movies?query=${query}`;\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (!query) {\n      return;\n    }\n    setQuery(query);\n    FetchByName(query).then(response => {\n      setData(response.results);\n    });\n  }, [searchParams]);\n\n  return (\n    <div>\n      <Search setSearchParams={setSearchParams} />\n      <FilmList state={from} data={data} />\n    </div>\n  );\n}\n"],"names":["KEY","FetchTopList","fetch","list","json","request","results","FetchByName","name","response","parsed","FetchById","id","FetchCast","FetchReviews","FilmList","data","state","elements","map","ell","to","from","title","Search","setSearchParams","useState","setState","onSubmit","e","preventDefault","queryString","trim","split","join","query","onChange","currentTarget","value","type","autoFocus","Movies","useSearchParams","searchParams","setData","setQuery","useEffect","get","then"],"sourceRoot":""}